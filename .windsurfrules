### üîÑ Project Setup, Awareness & Context
- **Always read @PLANNING.md or `PLANNING.md` and @PLANNING_BACKEND.md or `PLANNING_BACKEND.md`** at the start of a new conversation to understand the project's architecture, goals, style, and constraints.
- **Check @TASK.md or `TASK.md` and @TASK_BACKEND.md or `TASK_BACKEND.md`** before starting a new task. If the task isn‚Äôt listed, add it with a brief description and today's date.
- **Use consistent naming conventions, file structure, and architecture patterns** as described in @PLANNING.md or `PLANNING.md`and @PLANNING_BACKEND.md or `PLANNING_BACKEND.md`.
- **Always create pyenv virtualenv if not exists** and switch to it while working in this project.
- **Always create requirements.txt if not exists** and update the virtual environment by installing @requirements.txt.
- **Never install python package directly on the terminal** but firstly update requirements.txt file then pip install the requirements.txt
- **Never install node js package directly on the terminal** but firstly update package.json file then  install locally
- **Always cd to frontend or backend directory** before working on frontend or backend code
- **Always read @PLANNING_BACKEND.md or `PLANNING_BACKEND.md`** at the start of a new conversation to understand the project's architecture, goals, style, and constraints.
- **Always use nvm to manage Node.js versions** for frontend development. Set the correct Node version with `nvm use` based on .nvmrc or package.json engines field.
- **Never install Node.js packages globally** except for essential dev tools. All project dependencies should be installed locally.

### üß± Code Structure & Modularity
- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.
- **Organize code into clearly separated modules**, grouped by feature or responsibility.
- **Use clear, consistent imports** (prefer relative imports within packages).

### üß™ Testing & Reliability
- **Always create Pytest unit tests for new features** (functions, classes, routes, etc).
- **After updating any logic**, check whether existing unit tests need to be updated. If so, do it.
- **For Python based tests, tests should live in a `/tests` folder** mirroring the main app structure, for frontend react, nextjs based app tests should live in appropriate folders.
  - Include at least:
    - 1 test for expected use
    - 1 edge case
    - 1 failure case
- **Run the tests** and make sure it passes
- **If task is about implementing cli command then do run the command** and make sure it works

### ‚úÖ Task Completion
- **Mark completed tasks in @TASK.md or `TASK.md` and @TASK_BACKEND.md or `TASK_BACKEND.md`** immediately after finishing them.
- Add new sub-tasks or TODOs discovered during development to @TASK.md or `TASK.md` and @TASK_BACKEND.md or `TASK_BACKEND.md` under a ‚ÄúDiscovered During Work‚Äù section.

### üìé For Python code - Style & Conventions
- **Use Python** as the primary language.
- **Follow PEP8**, use type hints, and format with `black`.
- **Use `pydantic` for data validation**.
- Use `FastAPI` for APIs and `SQLAlchemy` or `SQLModel` for ORM if applicable.
- Write **docstrings for every function** using the Google style:
  ```python
  def example():
      """
      Brief summary.

      Args:
          param1 (type): Description.

      Returns:
          type: Description.
      """
  ```

### üìö Documentation & Explainability
- **Update `README.md`** when new features are added, dependencies change, or setup steps are modified.
- **Comment non-obvious code** and ensure everything is understandable to a mid-level developer.
- When writing complex logic, **add an inline `# Reason:` comment** explaining the why, not just the what.

### üß† AI Behavior Rules
- **Never assume missing context. Ask questions if uncertain.**
- **Never hallucinate libraries or functions** ‚Äì only use known, verified Python packages.
- **Always confirm file paths and module names** exist before referencing them in code or tests.
- **Never delete or overwrite existing code** unless explicitly instructed to or if part of a task from @TASK.md or `TASK.md` and @TASK_BACKEND.md or `TASK_BACKEND.md`.
- **Never install node js package directly on the terminal** but firstly update package.json file then  install locally
- **Never install python package directly on the terminal** but firstly update requirements.txt file then pip install the requirements.txt

### üîß Backend Service Development
- **Follow microservices boundaries** - Don't add features to a service that belong in another service as defined in PLANNING_BACKEND.md.
- **Create consistent API response formats** with standard error handling across all services.
- **Implement proper database transactions** when operations span multiple records.
- **Include database migration version** in each commit that changes models.
- **Document all API endpoints** with OpenAPI/Swagger annotations.
- **Always use the project-specific Python version** managed via pyenv as specified in .python-version or pyproject.toml.
- **Install all packages as local dependencies** (with `--save` or `--save-dev`) rather than global installations.
- **Include .python-version file** in the backend directory specifying the required Python version.
- **Include rate limiting headers** in all public-facing API responses.

### üé® Frontend Development
- **Follow Next.js best practices** for routing, data fetching, and component organization.
- **Use TypeScript interfaces** for all API response and request payloads.
- **Implement proper loading states** for all data-fetching operations.
- **Create responsive designs** that work on mobile, tablet, and desktop.
- **Implement proper error handling** for all API calls with user-friendly error messages.
- **Use React Query or SWR** for data fetching and caching.
- **Always use the project-specific Node.js version** managed via nvm as specified in .nvmrc or package.json.
- **Install all packages as local dependencies** (with `--save` or `--save-dev`) rather than global installations.
- **Include .nvmrc file** in the frontend directory specifying the required Node.js version.

### üíæ Database & Models
- **Create database indexes** for frequently queried fields.
- **Include full SQLAlchemy relationship definitions** in all model classes.
- **Implement soft delete** for all user-created content.
- **Use UUIDs for all primary keys** as specified in the models.
- **Include created_at and updated_at fields** on all database models.
- **Write explicit database migrations** instead of auto-generated ones for production changes.

### üîÄ Cross-Cutting Concerns
- **Implement proper logging** with correlation IDs across service boundaries.
- **Add JWT validation middleware** to all authenticated endpoints.
- **Include health check endpoints** in all services.
- **Monitor database query performance** and optimize slow queries.
- **Implement proper CORS configuration** for all services.
- **Handle file uploads securely** with proper validation and scanning.

### üõ†Ô∏è Development Workflow
- **Use separate virtual environments** for each backend service.
- **Run linters and formatters** before committing code (black, isort for Python; eslint, prettier for TypeScript/JavaScript).
- **Follow semantic versioning** for all packages and services.
- **Document all environment variables** in .env.example files for both frontend and backend services.
- **Use Docker Compose** for local development of multiple services together.

### üîí Security Practices
- **Never log sensitive information** like tokens, passwords, or personal data.
- **Implement proper input validation** for all API endpoints.
- **Set secure and SameSite flags** on all cookies.
- **Use parameterized queries** for all database operations.
- **Implement proper authorization checks** beyond authentication.
- **Sanitize user inputs** before displaying in the UI to prevent XSS.
